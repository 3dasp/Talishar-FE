import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { Player } from './player';

export interface GameState {
  playerOne: Player;
  playerTwo: Player;
}

const initialState: GameState = {
  playerOne: {
    // human player
    HeadEq: { cardNumber: 'WTR079' },
    ChestEq: { cardNumber: 'WTR150' },
    GlovesEq: { cardNumber: 'UPR158' },
    FeetEq: { cardNumber: 'WTR154' },
    WeaponLEq: { cardNumber: 'CRU048' },
    Hero: { cardNumber: 'CRU046' },
    WeaponREq: { cardNumber: 'CRU049' },
    Health: 20,
    ActionPoints: 0,
    PitchRemaining: 0
  },
  playerTwo: {
    // AI or opposing player
    HeadEq: { cardNumber: 'CRU006' },
    ChestEq: { cardNumber: 'WTR005' },
    GlovesEq: { cardNumber: 'WTR153' },
    FeetEq: { cardNumber: 'WTR004' },
    WeaponLEq: { cardNumber: '' },
    Hero: { cardNumber: 'WTR002' },
    WeaponREq: { cardNumber: 'WTR003' },
    Health: 20,
    ActionPoints: 0,
    PitchRemaining: 0
  }
};

export const gameSlice = createSlice({
  name: 'game',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {}
});

// export const {} = gameSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default gameSlice.reducer;
