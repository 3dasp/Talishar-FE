import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import ParseGameState from '../../app/ParseGameState';
import InitialGameState, { OfflineTestingGameState } from './InitialGameState';
import GameInfo from '../GameInfo';
import GameState from '../GameState';
import Card from '../Card';

export const nextTurn = createAsyncThunk(
  'game/nextTurn',
  async (params: GameInfo) => {
    // const queryURL = `http://localhost:41062/FaBOnline/GetNextTurnAPI.php?gameName=${params.gameID}&playerID=${params.playerID}&authKey=${params.authKey}`;
    const queryURL = `http://localhost:41062/FaBOnline/GetNextTurn3.php?gameName=${params.gameID}&playerID=${params.playerID}&authKey=${params.authKey}`;
    // const queryURL = `https://www.talishar.net/game/GetNextTurn3.php?gameName=${params.gameID}&playerID=${params.playerID}`;
    try {
      const response = await fetch(queryURL, {
        method: 'GET',
        headers: {}
      });
      const data = await response.text();
      console.log(data);
      const parsedData = JSON.parse(data);
      return ParseGameState(parsedData);
    } catch (e) {
      console.error(e);
    }
  }
);

export const playCard = createAsyncThunk(
  'game/playCard',
  async (cardParams: Card, { getState }) => {
    console.log('doing the thing');
    const { game } = getState() as { game: { gameInfo: GameInfo } };
    const gameInfo = game.gameInfo;
    const mode = 3;
    // const queryURL = `http://google.com`;
    const queryURL = `http://localhost:41062/FaBOnline/ProcessInput2.php?gameName=${gameInfo.gameID}&playerID=${gameInfo.playerID}&authKey=${gameInfo.authKey}&mode=${mode}&cardID=${cardParams.actionDataOverride}`;
    try {
      const response = await fetch(queryURL, {
        method: 'GET',
        headers: {}
      });
      const data = await response.text();
      console.log(data);
      return;
    } catch (e) {
      console.error(e);
    }
  }
);

export const gameSlice = createSlice({
  name: 'game',
  // change the following line if you want to test with filled-in dummy data
  // initialState: InitialGameState,
  initialState: OfflineTestingGameState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPopUp: (
      state,
      action: PayloadAction<{
        cardNumber: string;
        xCoord?: number;
        yCoord?: number;
      }>
    ) => {
      state.popup = {
        popupOn: true,
        xCoord: action.payload.xCoord,
        yCoord: action.payload.yCoord,
        popupCard: { cardNumber: action.payload.cardNumber }
      };
    },
    clearPopUp: (state) => {
      state.popup = { popupOn: false, popupCard: undefined };
    },
    setPlayCardMessage: (state) => {
      state.playCardMessage = {
        popUpOn: true,
        message: 'Release to play this card'
      };
    },
    clearPlayCardMessage: (state) => {
      state.playCardMessage = { popUpOn: false };
    },
    setCardListFocus: (
      state,
      action: PayloadAction<{
        cardList?: Card[];
        name?: string;
      }>
    ) => {
      state.cardListFocus = {
        active: true,
        cardList: action.payload.cardList,
        name: action.payload.name
      };
    },
    clearCardListFocus: (state) => {
      state.cardListFocus = undefined;
    },
    setGameStart: (
      state,
      action: PayloadAction<{
        playerID: number;
        gameID: number;
        authKey: string;
      }>
    ) => {
      (state.gameInfo.gameID = action.payload.gameID),
        (state.gameInfo.playerID = action.payload.playerID),
        (state.gameInfo.authKey = action.payload.authKey);
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(nextTurn.fulfilled, (state, action) => {
      if (action.payload === undefined) {
        return state;
      }
      state.playerOne = action.payload.playerOne;
      state.playerTwo = action.payload.playerTwo;
      state.activeCombatChain = action.payload.activeCombatChain;
      state.activeLayers = action.payload.activeLayers;
      state.oldCombatChain = action.payload.oldCombatChain;
      state.chatLog = action.payload.chatLog;
      return state;
    });
    builder.addCase(playCard.fulfilled, (_state, _action) => {
      return;
    });
  }
});

// export const {} = gameSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default gameSlice.reducer;

const { actions } = gameSlice;
export const {
  setPopUp,
  setGameStart,
  clearPopUp,
  setCardListFocus,
  clearCardListFocus
} = actions;
